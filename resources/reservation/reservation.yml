apiVersion: v1
kind: Namespace
metadata:
  name: ticketaka-reservation
spec:
  finalizers:
  - kubernetes

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: reservation-db-pv
  namespace: ticketaka-reservation
  labels:
    type: db
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: /reservaion-db-storage/

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: reservaion-db-pvc
  namespace: ticketaka-reservation
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi

---
apiVersion: v1
kind: Service
metadata:
  name: reservation-db-svc
  namespace: ticketaka-reservation
  labels:
    type: db
spec:
  type: NodePort
  ports:
    - port: 3308
      targetPort: 3308
  selector:
    type: db

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: reservation-db-initdb-config
  namespace: ticketaka-reservation
data:
  init.sql: >
    CREATE TABLE `rsv_member` (`member_id` bigint NOT NULL,`member_email`
    varchar(255) DEFAULT NULL,PRIMARY KEY (`member_id`));

    CREATE TABLE `reservation` (`reservation_id` bigint NOT NULL AUTO_INCREMENT,`member_id` bigint DEFAULT NULL,`performance_id` varchar(255) DEFAULT NULL, `performance_title` varchar(255) DEFAULT NULL, `reservation_create_at` datetime DEFAULT NULL, `reservation_date` date DEFAULT NULL, `reservation_deleted` varchar(255) DEFAULT NULL, `reservation_poster` text, `reservation_price` int DEFAULT NULL, `reservation_ticket_count` int DEFAULT NULL, `reservation_time` varchar(255) DEFAULT NULL, PRIMARY KEY (`reservation_id`), KEY `idx__member_id` (`member_id`));    

    CREATE TABLE `deletereservation` (`reservation_id` int NOT NULL AUTO_INCREMENT,`member_id` int NOT NULL,`performance_id` char(8) NOT NULL,`reservation_ticket_count` int NOT NULL,`reservation_date` date NOT NULL,`reservation_time` char(5) NOT NULL,`reservation_price` int NOT NULL,`reservation_poster` text NOT NULL,`reservation_deleted` char(1) NOT NULL,`reservation_create_at` datetime NOT NULL,`deleted_date_time` datetime NOT NULL,PRIMARY KEY (`reservation_id`));

    CREATE VIEW unit_reservation AS SELECT reservation_id, member_id, performance_id, performance_title, reservation_create_at, reservation_date, reservation_deleted,reservation_poster,reservation_price,reservation_ticket_count,reservation_time from reservation union SELECT reservation_id, member_id, performance_id, performance_title, reservation_create_at, reservation_date, reservation_deleted,reservation_poster,reservation_price,reservation_ticket_count,reservation_time from deletereservation;

    DELIMITER // 

    CREATE TRIGGER trg_deletedReservationTBL 
      AFTER DELETE 
        ON reservation 
      FOR EACH ROW 
      BEGIN 
        INSERT INTO deleteReservation(reservation_id, member_id,performance_id, performance_title, reservation_ticket_count, reservation_date, reservation_time, reservation_price, reservation_poster, reservation_deleted, reservation_create_at, deleted_date_time) 
        VALUES (OLD.reservation_id, OLD.member_id, OLD.performance_id, OLD.performance_title, OLD.reservation_ticket_count, OLD.reservation_date, OLD.reservation_time, OLD.reservation_price, OLD.reservation_poster, 'Y', OLD.reservation_create_at, current_timestamp()); 
    END; 

    // DELIMITER ;

---
apiVersion: v1
kind: Secret
metadata:
  creationTimestamp: null
  name: reservation-db-sec
  namespace: ticketaka-reservation
data:
  MARIADB_ROOT_PASSWORD: cGFzczEyMyM=
  MARIADB_DATABASE: dGlja2V0YWth
  MARIADB_USER: dXNlcg==
  MARIADB_PASSWORD: dXNlcg==
  MYSQL_TCP_PORT: MzMwOA==

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    type: db
  name: reservation-db
  namespace: ticketaka-reservation
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      type: db
  template:
    metadata:
      labels:
        type: db
    spec:
      containers:
        - image: mariadb:10.7.8-focal
          name: reservation-db
          args:
            - --character-set-server=utf8
            - --collation-server=utf8_general_ci
            - --explicit_defaults_for_timestamp=1
          envFrom:
            - secretRef: reservation-db-sec
              name: null
          env:
            - name: MARIADB_ROOT_HOST
              value: "%"
          ports:
            - containerPort: 3308
              name: reservation-db
          volumeMounts:
            - name: tz-seoul
              mountPath: /etc/localtime
            - name: roll-db-storage
              mountPath: /var/lib/mysql
      volumes:
        - name: tz-seoul
          hostPath:
            path: /usr/share/zoneinfo/Asia/Seoul
        - name: roll-db-storage
          persistentVolumeClaim:
            claimName: reservation-db-pvc
        - name: rsv-db-init
          configMap:
            name: reservation-db-initdb-config

---
apiVersion: v1
kind: Secret
metadata:
  creationTimestamp: null
  name: reservation-deploy-sec
  namespace: ticketaka-reservation
Data:
  SPRING_DATASOURCE_USERNAME: dXNlcg==
  SPRING_DATASOURCE_PASSWORD: dXNlcg==

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: reservaion
  name: reservation-deploy
  namespace: ticketaka-reservation
spec:
  replicas: 1
  selector:
    matchLabels:
      app: reservaion
  template:
    metadata:
      labels:
        app: reservaion
    spec:
      containers:
        - env:
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                configMapKeyRef:
                  name: reservation-deploy-sec
                  key: SPRING_DATASOURCE_USERNAME
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: reservation-deploy-sec
                  key: SPRING_DATASOURCE_PASSWORD
            - name: SERVER_PORT
              value: "8083"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mariadb://reservation-db-svc:3308/ticketaka?serverTimezone=Asia/Seoul
          image: roheejae/ticketaka-reservation:v0.0.17
          name: reservaion
          ports:
            - containerPort: 8083
              name: reservaion
          volumeMounts:
            - name: tz-seoul
              mountPath: /etc/localtime
      volumes:
        - name: tz-seoul
          hostPath:
            path: /usr/share/zoneinfo/Asia/Seoul
      restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: reservaion
  name: reservaion-svc
  namespace: ticketaka-reservation
spec:
  type: ClusterIP
  ports:
    - port: 8083
  selector:
    app: reservaion

---
apiVersion: v1
kind: Secret
metadata:
  creationTimestamp: null
  name: info-performance-sec
  namespace: ticketaka-reservation
data:
  HOL_SERVICE_KEY: ZVFpZStuanFLY202enpTUndqcVQ1dTdNMXRTTWQrd2srcmRCYlMxeHpqU25lQWkxdjlHVStlamx0VWZrNXNqTTRmVkQ2Y1dKTkp3dU9zRTJBTjdtWUE9PQ==
  KOPIS_SERVICE_KEY: NWQ4ZTljNTMwYzEyNDMzMzk3Yjk0ZmMwNjkzMWJlZDI=
  DATABASE_USER: dXNlcg==
  DATABASE_PASSWORD: dXNlcg==
  DATABASE_PORT: MzMwNg==
  DATABASE_NAME: dGlja2V0YWth

---
apiVersion: v1
kind: Pod
metadata:
  name: info-performance
  namespace: ticketaka-reservation
  labels:
    app: performance
spec:
  containers:
    - image: ehdwn15100/info_performance:1.0
      name: info-performance
      env:
        - name: DATABASE_HOST
          value: reservation-db-svc
      envFrom:
        - secretRef:
            name: info-performance-sec
  restartPolicy: OnFailure
